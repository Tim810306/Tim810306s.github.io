{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/tim/Tim810306.github.io/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _slicedToArray from\"/Users/tim/Tim810306.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n          {\\n            repositoryOwner(login: \\\"your github username\\\") {\\n              ... on User {\\n                pinnedRepositories(first: 6) {\\n                  edges {\\n                    node {\\n                      nameWithOwner\\n                      description\\n                      forkCount\\n                      stargazers {\\n                        totalCount\\n                      }\\n                      url\\n                      id\\n                      diskUsage\\n                      primaryLanguage {\\n                        name\\n                        color\\n                      }\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        \"]);_templateObject=function _templateObject(){return data;};return data;}import React,{useState,useEffect}from\"react\";import ApolloClient from\"apollo-boost\";import{gql}from\"apollo-boost\";import\"./Project.css\";import GithubRepoCard from\"../../components/githubRepoCard/GithubRepoCard\";import Button from\"../../components/button/Button\";export default function Projects(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),repo=_useState2[0],setrepo=_useState2[1];useEffect(function(){getRepoData();},[]);function getRepoData(){var client=new ApolloClient({uri:\"https://api.github.com/graphql\",request:function request(operation){operation.setContext({headers:{authorization:\"Bearer \".concat(atob(\"YOUR CONVERTED GITHUB TOKEN\"))}});}});client.query({query:gql(_templateObject())}).then(function(result){setrepoFunction(result.data.repositoryOwner.pinnedRepositories.edges);console.log(result);});}function setrepoFunction(array){setrepo(array);}return React.createElement(\"div\",{className:\"main\",id:\"opensource\"},React.createElement(\"h1\",{className:\"project-title\"},\"Open Source Projects\"),React.createElement(\"div\",{className:\"repo-cards-div-main\"},repo.map(function(v,i){return React.createElement(GithubRepoCard,{repo:v,key:v.node.id});})),React.createElement(Button,{text:\"More Projects\",className:\"project-button\",href:\"https://github.com/saadpasta\",newTab:true}));}","map":{"version":3,"sources":["/Users/tim/Tim810306.github.io/src/containers/projects/Projects.js"],"names":["React","useState","useEffect","ApolloClient","gql","GithubRepoCard","Button","Projects","repo","setrepo","getRepoData","client","uri","request","operation","setContext","headers","authorization","atob","query","then","result","setrepoFunction","data","repositoryOwner","pinnedRepositories","edges","console","log","array","map","v","i","node","id"],"mappings":"+lCAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,YAAP,KAAyB,cAAzB,CACA,OAASC,GAAT,KAAoB,cAApB,CACA,MAAO,eAAP,CACA,MAAOC,CAAAA,cAAP,KAA2B,gDAA3B,CACA,MAAOC,CAAAA,MAAP,KAAmB,gCAAnB,CAEA,cAAe,SAASC,CAAAA,QAAT,EAAoB,eACTN,QAAQ,CAAC,EAAD,CADC,wCAC1BO,IAD0B,eACpBC,OADoB,eAGjCP,SAAS,CAAC,UAAM,CACdQ,WAAW,GACZ,CAFQ,CAEN,EAFM,CAAT,CAIA,QAASA,CAAAA,WAAT,EAAuB,CACrB,GAAMC,CAAAA,MAAM,CAAG,GAAIR,CAAAA,YAAJ,CAAiB,CAC9BS,GAAG,CAAE,gCADyB,CAE9BC,OAAO,CAAE,iBAAAC,SAAS,CAAI,CACpBA,SAAS,CAACC,UAAV,CAAqB,CACnBC,OAAO,CAAE,CACPC,aAAa,kBAAYC,IAAI,CAAC,6BAAD,CAAhB,CADN,CADU,CAArB,EAKD,CAR6B,CAAjB,CAAf,CAWAP,MAAM,CACHQ,KADH,CACS,CACLA,KAAK,CAAEf,GAAF,mBADA,CADT,EA8BGgB,IA9BH,CA8BQ,SAAAC,MAAM,CAAI,CACdC,eAAe,CAACD,MAAM,CAACE,IAAP,CAAYC,eAAZ,CAA4BC,kBAA5B,CAA+CC,KAAhD,CAAf,CACAC,OAAO,CAACC,GAAR,CAAYP,MAAZ,EACD,CAjCH,EAkCD,CAED,QAASC,CAAAA,eAAT,CAAyBO,KAAzB,CAAgC,CAC9BpB,OAAO,CAACoB,KAAD,CAAP,CACD,CAED,MACE,4BAAK,SAAS,CAAC,MAAf,CAAsB,EAAE,CAAC,YAAzB,EACE,0BAAI,SAAS,CAAC,eAAd,yBADF,CAEE,2BAAK,SAAS,CAAC,qBAAf,EACGrB,IAAI,CAACsB,GAAL,CAAS,SAACC,CAAD,CAAIC,CAAJ,CAAU,CAClB,MAAO,qBAAC,cAAD,EAAgB,IAAI,CAAED,CAAtB,CAAyB,GAAG,CAAEA,CAAC,CAACE,IAAF,CAAOC,EAArC,EAAP,CACD,CAFA,CADH,CAFF,CAOE,oBAAC,MAAD,EAAQ,IAAI,CAAE,eAAd,CAA+B,SAAS,CAAC,gBAAzC,CAA0D,IAAI,CAAC,8BAA/D,CAA8F,MAAM,CAAE,IAAtG,EAPF,CADF,CAWD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport \"./Project.css\";\nimport GithubRepoCard from \"../../components/githubRepoCard/GithubRepoCard\";\nimport Button from \"../../components/button/Button\";\n\nexport default function Projects() {\n  const [repo, setrepo] = useState([]);\n\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${atob(\"YOUR CONVERTED GITHUB TOKEN\")}`\n          }\n        });\n      }\n    });\n\n    client\n      .query({\n        query: gql`\n          {\n            repositoryOwner(login: \"your github username\") {\n              ... on User {\n                pinnedRepositories(first: 6) {\n                  edges {\n                    node {\n                      nameWithOwner\n                      description\n                      forkCount\n                      stargazers {\n                        totalCount\n                      }\n                      url\n                      id\n                      diskUsage\n                      primaryLanguage {\n                        name\n                        color\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `\n      })\n      .then(result => {\n        setrepoFunction(result.data.repositoryOwner.pinnedRepositories.edges);\n        console.log(result);\n      });\n  }\n\n  function setrepoFunction(array) {\n    setrepo(array);\n  }\n\n  return (\n    <div className=\"main\" id=\"opensource\">\n      <h1 className=\"project-title\">Open Source Projects</h1>\n      <div className=\"repo-cards-div-main\">\n        {repo.map((v, i) => {\n          return <GithubRepoCard repo={v} key={v.node.id} />;\n        })}\n      </div>\n      <Button text={\"More Projects\"} className=\"project-button\" href=\"https://github.com/saadpasta\" newTab={true} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}